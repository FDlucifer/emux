#!/bin/bash
#
# ARM-X QEMU Launcher
#
# By Saumil Shah
# The Exploit Laboratory
#
# requires dialog to be installed

EXTRAQEMUOPTS="-nographic -monitor tcp:127.0.0.1:55555,server,nowait"

source /armx/run/utils
check_armx_volume_permissions
uncompress_qemu_roms
uncompress_hostfs
check_if_logging_required
new_log

source /armx/run/parsedevices

hostfs=/armx/hostfs/hostfs.ext2

fundialog=${fundialog=dialog}

declare -a choices

j=0

for i in $(seq 0 $((count - 1)))
do
   choices[$j]=$i
   choices[$((j + 1))]=${descs[$i]}
   j=$((j + 2))
done

x=`$fundialog --stdout --clear --cancel-label "Quit" \
   --backtitle "ARM-X - The Versatile ARM IoT Device Emulator" \
   --menu "ARM-X Launcher" 0 0 0 "${choices[@]}"`

status=$?
clear

if [ $status -ne 0 ]
then
   exit
fi

cpu=""
dtb=""

if [ "${cpus[$x]}" != "" ]
then
   cpu="-cpu ${cpus[$x]}"
fi

if [ "${dtbs[$x]}" != "" ]
then
   dtb="-dtb /armx/dtb/${dtbs[$x]}"
fi

append=${bootargs[$x]}

#Different commands are used based on filesystem
if [[ ${hostfs[$x]} == *"qcow2"* ]]
then
    qemucmd="/armx/run/qemu-bin/${qemus[$x]} -M ${machines[$x]} ${cpu} -m ${mems[$x]} -kernel /armx/${ids[$x]}/kernel/${kernels[$x]} ${dtb} -hda ${hostfs[$x]} -append \"$append\" -net ${nics[$x]} -net tap,ifname=tap0,script=no,downscript=no -no-reboot -nographic ${customs[$x]} ${EXTRAQEMUOPTS}"
else 
    qemucmd="/armx/run/qemu-bin/${qemus[$x]} -M ${machines[$x]} ${cpu} -m ${mems[$x]} -kernel /armx/${ids[$x]}/kernel/${kernels[$x]} ${dtb} -drive file=${hostfs[$x]},${drives[$x]} ${flashargs[$x]} -append \"$append\" -net ${nics[$x]} -net tap,ifname=tap0,script=no,downscript=no -no-reboot -nographic ${customs[$x]} ${EXTRAQEMUOPTS}"
fi

#qemucmd="/armx/run/qemu-bin/${qemus[$x]} -M ${machines[$x]} ${cpu} -m ${mems[$x]} -kernel /armx/${ids[$x]}/kernel/${kernels[$x]} ${dtb} -drive file=${hostfs},${drives[$x]} ${flashargs[$x]} -append \"$append\" -net ${nics[$x]} -net tap,ifname=tap0,script=no,downscript=no ${customs[$x]} ${EXTRAQEMUOPTS}"
log "[+] QEMU Launch Command"
log "${qemucmd}"

# if the emulated device uses flash memory files and they don't exist,
# check for the presence of a compressed .tar.bz2 file which contains them.
# If the .tar.bz2 doesn't exist, the flash memory files need to be created,
# otherwise QEMU won't run

log "[+] Checking if flash memory files need to be created for ${ids[$x]}"
if [ "${flashfile[$x]}" != "" ]
then
   flashfile0="${flashfile[$x]}0.bin"
   flashfile1="${flashfile[$x]}1.bin"
   if [ ! -f ${flashfile0} ] || [ ! -f  ${flashfile1} ]
   then
      log "[+] flash memory files not found"
      log "[+] checking for compressed flash memory files"
      flashtar="${flashfile[$x]}.tar.bz2"
      if [ -f ${flashtar} ]
      then
         flashdir=$(dirname ${flashtar})
         log "[+] extracting ${flashtar}"
         tar -C ${flashdir} -jxvf ${flashtar}
      else
         log "Creating empty ${flashfile0}"
         mkdir -p $(dirname ${flashfile0})
         dd if=/dev/zero of=${flashfile0} bs=1M count=64
         log "Creating empty ${flashfile1}"
         dd if=/dev/zero of=${flashfile1} bs=1M count=64
      fi
   else
      log "[+] ${flashfile0} found"
      log "[+] ${flashfile1} found"
   fi
else
   log "[+] mtdparts not present"
fi

cp /armx/run/run-init-template /armx/${ids[$x]}/run-init
cp /armx/run/run-binsh-template /armx/${ids[$x]}/run-binsh

echo ${ids[$x]} > /tmp/armxrunning

if [ "$CONSOLELOGFILE" ]
then
   script -a -f -c "${qemucmd}" ${CONSOLELOGFILE}
else
   eval "$qemucmd"
fi
